"""Initial schema

Revision ID: 001
Revises: 
Create Date: 2024-01-15 10:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '001'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('source_files',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('filename', sa.String(), nullable=False),
    sa.Column('file_path', sa.String(), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('kind', sa.Enum('internal', 'cleared', 'span', name='filekind'), nullable=False),
    sa.Column('headers', sa.JSON(), nullable=True),
    sa.Column('row_count', sa.Integer(), nullable=True),
    sa.Column('upload_status', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_source_files_kind'), 'source_files', ['kind'], unique=False)
    op.create_table('trades_cleared',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('trade_id', sa.String(), nullable=False),
    sa.Column('account', sa.String(), nullable=False),
    sa.Column('symbol', sa.String(), nullable=False),
    sa.Column('side', sa.String(), nullable=False),
    sa.Column('qty', sa.Integer(), nullable=False),
    sa.Column('price', sa.Numeric(precision=10, scale=4), nullable=False),
    sa.Column('trade_date', sa.Date(), nullable=False),
    sa.Column('exchange', sa.String(), nullable=True),
    sa.Column('clearing_ref', sa.String(), nullable=True),
    sa.Column('source_file_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['source_file_id'], ['source_files.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_trades_cleared_account'), 'trades_cleared', ['account'], unique=False)
    op.create_index(op.f('ix_trades_cleared_symbol'), 'trades_cleared', ['symbol'], unique=False)
    op.create_index(op.f('ix_trades_cleared_trade_date'), 'trades_cleared', ['trade_date'], unique=False)
    op.create_table('trades_internal',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('trade_id', sa.String(), nullable=False),
    sa.Column('account', sa.String(), nullable=False),
    sa.Column('symbol', sa.String(), nullable=False),
    sa.Column('side', sa.String(), nullable=False),
    sa.Column('qty', sa.Integer(), nullable=False),
    sa.Column('price', sa.Numeric(precision=10, scale=4), nullable=False),
    sa.Column('trade_date', sa.Date(), nullable=False),
    sa.Column('exchange', sa.String(), nullable=True),
    sa.Column('clearing_ref', sa.String(), nullable=True),
    sa.Column('source_file_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['source_file_id'], ['source_files.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_trades_internal_account'), 'trades_internal', ['account'], unique=False)
    op.create_index(op.f('ix_trades_internal_symbol'), 'trades_internal', ['symbol'], unique=False)
    op.create_index(op.f('ix_trades_internal_trade_date'), 'trades_internal', ['trade_date'], unique=False)
    op.create_table('recon_runs',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', name='reconciliationstatus'), nullable=False),
    sa.Column('internal_file_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('cleared_file_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('column_mapping', sa.JSON(), nullable=False),
    sa.Column('tolerances', sa.JSON(), nullable=False),
    sa.Column('summary', sa.JSON(), nullable=True),
    sa.Column('error_message', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['cleared_file_id'], ['source_files.id'], ),
    sa.ForeignKeyConstraint(['internal_file_id'], ['source_files.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('span_snapshots',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('as_of_date', sa.Date(), nullable=False),
    sa.Column('account', sa.String(), nullable=False),
    sa.Column('product', sa.String(), nullable=False),
    sa.Column('scan_risk', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('total_margin', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('source_file_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['source_file_id'], ['source_files.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_span_snapshots_account'), 'span_snapshots', ['account'], unique=False)
    op.create_index(op.f('ix_span_snapshots_as_of_date'), 'span_snapshots', ['as_of_date'], unique=False)
    op.create_index(op.f('ix_span_snapshots_product'), 'span_snapshots', ['product'], unique=False)
    op.create_table('recon_exceptions',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('recon_run_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('status', sa.Enum('OPEN', 'RESOLVED', name='exceptionstatus'), nullable=False),
    sa.Column('keys', sa.JSON(), nullable=False),
    sa.Column('internal', sa.JSON(), nullable=True),
    sa.Column('cleared', sa.JSON(), nullable=True),
    sa.Column('diff', sa.JSON(), nullable=True),
    sa.Column('resolution_notes', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['recon_run_id'], ['recon_runs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('span_deltas',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('as_of_date', sa.Date(), nullable=False),
    sa.Column('account', sa.String(), nullable=False),
    sa.Column('product', sa.String(), nullable=False),
    sa.Column('scan_before', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('scan_after', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('delta', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('snapshot_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['snapshot_id'], ['span_snapshots.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_span_deltas_account'), 'span_deltas', ['account'], unique=False)
    op.create_index(op.f('ix_span_deltas_as_of_date'), 'span_deltas', ['as_of_date'], unique=False)
    op.create_index(op.f('ix_span_deltas_product'), 'span_deltas', ['product'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_span_deltas_product'), table_name='span_deltas')
    op.drop_index(op.f('ix_span_deltas_as_of_date'), table_name='span_deltas')
    op.drop_index(op.f('ix_span_deltas_account'), table_name='span_deltas')
    op.drop_table('span_deltas')
    op.drop_table('recon_exceptions')
    op.drop_index(op.f('ix_span_snapshots_product'), table_name='span_snapshots')
    op.drop_index(op.f('ix_span_snapshots_as_of_date'), table_name='span_snapshots')
    op.drop_index(op.f('ix_span_snapshots_account'), table_name='span_snapshots')
    op.drop_table('span_snapshots')
    op.drop_table('recon_runs')
    op.drop_index(op.f('ix_trades_internal_trade_date'), table_name='trades_internal')
    op.drop_index(op.f('ix_trades_internal_symbol'), table_name='trades_internal')
    op.drop_index(op.f('ix_trades_internal_account'), table_name='trades_internal')
    op.drop_table('trades_internal')
    op.drop_index(op.f('ix_trades_cleared_trade_date'), table_name='trades_cleared')
    op.drop_index(op.f('ix_trades_cleared_symbol'), table_name='trades_cleared')
    op.drop_index(op.f('ix_trades_cleared_account'), table_name='trades_cleared')
    op.drop_table('trades_cleared')
    op.drop_index(op.f('ix_source_files_kind'), table_name='source_files')
    op.drop_table('source_files')
    # ### end Alembic commands ###
